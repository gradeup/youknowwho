# Todo for async ykw:

- _meta to have a uuid per message (timestamp + random)

- loadedRules : make 2 new data structures :
  -- "#ruleHash" : {
       "loadedRules" : [],
       "tagRules"    : {
         "tag" : []
       },
       msg_under_process : "integer"
     }

     // Still don't know what this means .
  -- "#metaId" : {
        "message" : #message
      }

  -- "latestRuleHash" : #ruleHash

- Cleanup ruleHash as and when the messages under process are zero OR the rule engine is not the latest one that is running . This is called when the loadRules is executed by the client.

msg._meta._flowControl : {
  "rule_array_idx"     : #idx,
  "rule_condition_idx" : #conditionIdx,
  "rule_action_idx"    : #actionIdx
}

All changes inside the message object will be referential.

  1. getNextRule() :
     - checkMeta  && ruleHash to get which condition to execute next (getNextCondition).
     - called by executeRuleEngine (the outer function , the mother of all)

  3. getNextCondition() ->
  4. getNextAction() ->

  5. checkDecision (rule, message) -> says if the next condition has be executed or not ,  current rule has to be skipped or its actions have to be executed.

  6. applyCondition(callback, message, condition) -> parsing also has to be done here . after the condition is applied, it calls the callback  with a boolean.

     - _condition_checkVariable () ->
     - _condition_exec () ->

  7. applyAction(callback, message, action) ->
     - _action_setVariable
     - _action_dangerousEval
     - _action_reExit
     - _action_exec

     Action exec will only call the callback to indicate the (i know what to right).


  8. updateMeta() -> can be called from applyAction, applyRule, applyCondition .....
     - sets msg._meta._flowControl.rule_array_idx || null
     - sets msg._meta._flowControl.rule_condition_idx || null.
     - sets msg._meta._flowControl.rule_action_idx || null.


  9. applyRule (callback , message, rule):
     - checkMeta  && ruleHash to get which condition to execute next (getNextCondition).
     - applyCondition
     - checkDecision
     - checkMeta  && ruleHash to get which action to execute next (getNextACtion).
     - applyAction

  10. executeRE (callback, message) :
     - starting point to call getNextRule()
     - calls applyRule


   11. __cb_applyCondition()
   12. __cb_applyAction()
   13. __cb_applyRule()


   FS :

   Actions /
     - index.js -> applyAction


   Conditions /
     - index.js -> applyCondition


   Rules/
     - index.js ->